
//----------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a tool.
//		Changes to this file may cause incorrect behaviour and will be lost 
//		if the code is regenerated.
// </autogenerated>
//----------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
using Soneta.Types;
using Soneta.Business;
using Soneta.CRM;
using Soneta.Szkolenie;

[assembly: ModuleType("Szkolenie", typeof(Soneta.Szkolenie.SzkolenieModule), 4, "Szkolenie", 3, VersionNumber=1)]

namespace Soneta.Szkolenie {

	/// <summary>
	/// Moduł Szkolenie.
	/// <seealso cref="Soneta.CRM"/>
	/// </summary>
	/// <seealso cref="Soneta.Business.Module"/>
	/// <seealso cref="Soneta.Business.Session"/>
	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public partial class SzkolenieModule : Module {

		public static SzkolenieModule GetInstance(ISessionable session) => (SzkolenieModule)session?.Session?.Modules[moduleInfo];

		private static Soneta.Business.App.ModuleInfo moduleInfo = new Soneta.Business.App.ModuleInfo(session => new SzkolenieModule(session)) {
		};

		SzkolenieModule(Session session) : base(session) {}

		private CRMModule moduleCRM;

		[Browsable(false)]
		public CRMModule CRM => moduleCRM ?? (moduleCRM = CRMModule.GetInstance(Session));

		public static readonly Soneta.Business.App.TableInfo LotyTableInfo = new Soneta.Business.App.TableInfo.Create<Loty, Lot, LotRecord>("Lot") {
		};

		public Loty Loty => (Loty)Session.Tables[LotyTableInfo];

		private static Soneta.Business.App.KeyInfo keyInfoLotWgKod = new Soneta.Business.App.KeyInfo(LotyTableInfo, table => new LotTable.WgKodKey(table)) {
			Name = "WgKod",
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"KodUslugi"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów Lot.
		/// Dziedzicząca klasa <see cref="Loty"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="Loty"/>
		/// <seealso cref="LotRow"/>
		/// <seealso cref="Lot"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Tabela z możliwymi lotami")]
		public abstract partial class LotTable : GuidedTable {

			protected LotTable() {}

			public class WgKodKey : Key<Lot> {
				internal WgKodKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((LotRecord)rec).KodUslugi.TrimEnd()
				};

				public Lot this[string koduslugi] => (Lot)Find(koduslugi);
			}

			public WgKodKey WgKod => (WgKodKey)Session.Keys[keyInfoLotWgKod];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="SzkolenieModule"/>
			public new SzkolenieModule Module => (SzkolenieModule)base.Module;

			public System.Linq.IQueryable<Lot> AsQuery() => AsQuery<Lot>();

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Lot"/>
			public new Lot this[int id] => (Lot)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Lot"/>
			public new Lot[] this[int[] ids] => (Lot[])base[ids];

			public new Lot this[Guid guid] => (Lot)base[guid];

			protected override Row CreateRow(RowCreator creator) => new Lot();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("KodUslugi");
				names.Append(divider); names.Append("Nazwa");
				names.Append(divider); names.Append("CenaValue");
				names.Append(divider); names.Append("CenaSymbol");
				names.Append(divider); names.Append("LokalizacjaMiejscowosc");
				names.Append(divider); names.Append("LokalizacjaICAO");
				names.Append(divider); names.Append("Opis");
			}

		}

		public abstract partial class LotRow : GuidedRow {

			private LotRecord record;

			protected override void AssignRecord(Record rec) {
				record = (LotRecord)rec;
			}

			protected LotRow() : base(true) {
			}

			protected override Row PrimaryRow => null;

			[MaxLength(6)]
			[Required]
			public string KodUslugi {
				get {
					if (record==null) GetRecord();
					return record.KodUslugi;
				}
				set {
					LotSchema.KodUslugiBeforeEdit?.Invoke((Lot)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "KodUslugi");
					if (value.Length>KodUslugiLength) throw new ValueToLongException(this, "KodUslugi", KodUslugiLength);
					GetEdit(record==null, false);
					record.KodUslugi = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoLotWgKod);
					}
					LotSchema.KodUslugiAfterEdit?.Invoke((Lot)this);
				}
			}

			public const int KodUslugiLength = 6;

			[MaxLength(80)]
			[Required]
			public string Nazwa {
				get {
					if (record==null) GetRecord();
					return record.Nazwa;
				}
				set {
					LotSchema.NazwaBeforeEdit?.Invoke((Lot)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "Nazwa");
					if (value.Length>NazwaLength) throw new ValueToLongException(this, "Nazwa", NazwaLength);
					GetEdit(record==null, false);
					record.Nazwa = value;
					LotSchema.NazwaAfterEdit?.Invoke((Lot)this);
				}
			}

			public const int NazwaLength = 80;

			public Currency Cena {
				get {
					if (record==null) GetRecord();
					return record.Cena;
				}
				set {
					LotSchema.CenaBeforeEdit?.Invoke((Lot)this, ref value);
					GetEdit(record==null, false);
					record.Cena = value;
					LotSchema.CenaAfterEdit?.Invoke((Lot)this);
				}
			}

			[MaxLength(20)]
			[Required]
			public string LokalizacjaMiejscowosc {
				get {
					if (record==null) GetRecord();
					return record.LokalizacjaMiejscowosc;
				}
				set {
					LotSchema.LokalizacjaMiejscowoscBeforeEdit?.Invoke((Lot)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "LokalizacjaMiejscowosc");
					if (value.Length>LokalizacjaMiejscowoscLength) throw new ValueToLongException(this, "LokalizacjaMiejscowosc", LokalizacjaMiejscowoscLength);
					GetEdit(record==null, false);
					record.LokalizacjaMiejscowosc = value;
					LotSchema.LokalizacjaMiejscowoscAfterEdit?.Invoke((Lot)this);
				}
			}

			public const int LokalizacjaMiejscowoscLength = 20;

			[MaxLength(4)]
			public string LokalizacjaICAO {
				get {
					if (record==null) GetRecord();
					return record.LokalizacjaICAO;
				}
				set {
					LotSchema.LokalizacjaICAOBeforeEdit?.Invoke((Lot)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>LokalizacjaICAOLength) throw new ValueToLongException(this, "LokalizacjaICAO", LokalizacjaICAOLength);
					GetEdit(record==null, false);
					record.LokalizacjaICAO = value;
					LotSchema.LokalizacjaICAOAfterEdit?.Invoke((Lot)this);
				}
			}

			public const int LokalizacjaICAOLength = 4;

			[MaxLength(200)]
			public string Opis {
				get {
					if (record==null) GetRecord();
					return record.Opis;
				}
				set {
					LotSchema.OpisBeforeEdit?.Invoke((Lot)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>OpisLength) throw new ValueToLongException(this, "Opis", OpisLength);
					GetEdit(record==null, false);
					record.Opis = value;
					LotSchema.OpisAfterEdit?.Invoke((Lot)this);
				}
			}

			public const int OpisLength = 200;

			[ChildTable("Rezerwacja", "Soneta.Szkolenie.Rezerwacja", "Lot")]
			public SubTable<Rezerwacja> Fields => (SubTable<Rezerwacja>)Table.Module.Rezerwacje.WgLot.CreateSubTable(this);

			[Browsable(false)]
			public new Loty Table => (Loty)base.Table;

			[Browsable(false)]
			public SzkolenieModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => LotyTableInfo;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				LotSchema.OnCalcObjectRight?.Invoke((Lot)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				LotSchema.OnCalcParentsObjectRight?.Invoke((Lot)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				LotSchema.OnCalcReadOnly?.Invoke((Lot)this, ref result);
				return result;
			}

			class KodUslugiRequiredVerifier : RequiredVerifier {
				internal KodUslugiRequiredVerifier(IRow row) : base(row, "KodUslugi") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((LotRow)Row).KodUslugi));
			}

			class NazwaRequiredVerifier : RequiredVerifier {
				internal NazwaRequiredVerifier(IRow row) : base(row, "Nazwa") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((LotRow)Row).Nazwa));
			}

			class LokalizacjaMiejscowoscRequiredVerifier : RequiredVerifier {
				internal LokalizacjaMiejscowoscRequiredVerifier(IRow row) : base(row, "LokalizacjaMiejscowosc") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((LotRow)Row).LokalizacjaMiejscowosc));
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new KodUslugiRequiredVerifier(this));
				Session.Verifiers.Add(new NazwaRequiredVerifier(this));
				Session.Verifiers.Add(new LokalizacjaMiejscowoscRequiredVerifier(this));
				LotSchema.OnAdded?.Invoke((Lot)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				LotSchema.OnLoaded?.Invoke((Lot)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				LotSchema.OnEditing?.Invoke((Lot)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				LotSchema.OnDeleting?.Invoke((Lot)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				LotSchema.OnDeleted?.Invoke((Lot)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				LotSchema.OnRepacked?.Invoke((Lot)this);
			}

		}

		public sealed class LotRecord : GuidedRecord {
			[Required]
			[MaxLength(6)]
			public string KodUslugi = "";
			[Required]
			[MaxLength(80)]
			public string Nazwa = "";
			public Currency Cena;
			[Required]
			[MaxLength(20)]
			public string LokalizacjaMiejscowosc = "";
			[MaxLength(4)]
			public string LokalizacjaICAO = "";
			[MaxLength(200)]
			public string Opis = "";

			public override Record Clone() {
				LotRecord rec = (LotRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				KodUslugi = creator.Read_string();
				Nazwa = creator.Read_string();
				Cena = creator.Read_currency();
				LokalizacjaMiejscowosc = creator.Read_string();
				LokalizacjaICAO = creator.Read_string();
				Opis = creator.Read_string();
			}
		}

		public static class LotSchema {

			internal static RowDelegate<LotRow, string> KodUslugiBeforeEdit;
			public static void AddKodUslugiBeforeEdit(RowDelegate<LotRow, string> value)
				=> KodUslugiBeforeEdit = (RowDelegate<LotRow, string>)Delegate.Combine(KodUslugiBeforeEdit, value);

			internal static RowDelegate<LotRow> KodUslugiAfterEdit;
			public static void AddKodUslugiAfterEdit(RowDelegate<LotRow> value)
				=> KodUslugiAfterEdit = (RowDelegate<LotRow>)Delegate.Combine(KodUslugiAfterEdit, value);

			internal static RowDelegate<LotRow, string> NazwaBeforeEdit;
			public static void AddNazwaBeforeEdit(RowDelegate<LotRow, string> value)
				=> NazwaBeforeEdit = (RowDelegate<LotRow, string>)Delegate.Combine(NazwaBeforeEdit, value);

			internal static RowDelegate<LotRow> NazwaAfterEdit;
			public static void AddNazwaAfterEdit(RowDelegate<LotRow> value)
				=> NazwaAfterEdit = (RowDelegate<LotRow>)Delegate.Combine(NazwaAfterEdit, value);

			internal static RowDelegate<LotRow, Currency> CenaBeforeEdit;
			public static void AddCenaBeforeEdit(RowDelegate<LotRow, Currency> value)
				=> CenaBeforeEdit = (RowDelegate<LotRow, Currency>)Delegate.Combine(CenaBeforeEdit, value);

			internal static RowDelegate<LotRow> CenaAfterEdit;
			public static void AddCenaAfterEdit(RowDelegate<LotRow> value)
				=> CenaAfterEdit = (RowDelegate<LotRow>)Delegate.Combine(CenaAfterEdit, value);

			internal static RowDelegate<LotRow, string> LokalizacjaMiejscowoscBeforeEdit;
			public static void AddLokalizacjaMiejscowoscBeforeEdit(RowDelegate<LotRow, string> value)
				=> LokalizacjaMiejscowoscBeforeEdit = (RowDelegate<LotRow, string>)Delegate.Combine(LokalizacjaMiejscowoscBeforeEdit, value);

			internal static RowDelegate<LotRow> LokalizacjaMiejscowoscAfterEdit;
			public static void AddLokalizacjaMiejscowoscAfterEdit(RowDelegate<LotRow> value)
				=> LokalizacjaMiejscowoscAfterEdit = (RowDelegate<LotRow>)Delegate.Combine(LokalizacjaMiejscowoscAfterEdit, value);

			internal static RowDelegate<LotRow, string> LokalizacjaICAOBeforeEdit;
			public static void AddLokalizacjaICAOBeforeEdit(RowDelegate<LotRow, string> value)
				=> LokalizacjaICAOBeforeEdit = (RowDelegate<LotRow, string>)Delegate.Combine(LokalizacjaICAOBeforeEdit, value);

			internal static RowDelegate<LotRow> LokalizacjaICAOAfterEdit;
			public static void AddLokalizacjaICAOAfterEdit(RowDelegate<LotRow> value)
				=> LokalizacjaICAOAfterEdit = (RowDelegate<LotRow>)Delegate.Combine(LokalizacjaICAOAfterEdit, value);

			internal static RowDelegate<LotRow, string> OpisBeforeEdit;
			public static void AddOpisBeforeEdit(RowDelegate<LotRow, string> value)
				=> OpisBeforeEdit = (RowDelegate<LotRow, string>)Delegate.Combine(OpisBeforeEdit, value);

			internal static RowDelegate<LotRow> OpisAfterEdit;
			public static void AddOpisAfterEdit(RowDelegate<LotRow> value)
				=> OpisAfterEdit = (RowDelegate<LotRow>)Delegate.Combine(OpisAfterEdit, value);

			internal static RowDelegate<LotRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<LotRow> value)
				=> OnLoaded = (RowDelegate<LotRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<LotRow> OnAdded;
			public static void AddOnAdded(RowDelegate<LotRow> value)
				=> OnAdded = (RowDelegate<LotRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<LotRow> OnEditing;
			public static void AddOnEditing(RowDelegate<LotRow> value)
				=> OnEditing = (RowDelegate<LotRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<LotRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<LotRow> value)
				=> OnDeleting = (RowDelegate<LotRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<LotRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<LotRow> value)
				=> OnDeleted = (RowDelegate<LotRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<LotRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<LotRow> value)
				=> OnRepacked = (RowDelegate<LotRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<LotRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<LotRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<LotRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<LotRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<LotRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<LotRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<LotRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<LotRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<LotRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

		public static readonly Soneta.Business.App.TableInfo MaszynyTableInfo = new Soneta.Business.App.TableInfo.Create<Maszyny, Maszyna, MaszynaRecord>("Maszyna") {
		};

		public Maszyny Maszyny => (Maszyny)Session.Tables[MaszynyTableInfo];

		private static Soneta.Business.App.KeyInfo keyInfoMaszynaWgNrBoczny = new Soneta.Business.App.KeyInfo(MaszynyTableInfo, table => new MaszynaTable.WgNrBocznyKey(table)) {
			Name = "WgNrBoczny",
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"NrBoczny"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów Maszyna.
		/// Dziedzicząca klasa <see cref="Maszyny"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="Maszyny"/>
		/// <seealso cref="MaszynaRow"/>
		/// <seealso cref="Maszyna"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Tabela maszyn którymi można odbyć lot")]
		public abstract partial class MaszynaTable : GuidedTable {

			protected MaszynaTable() {}

			public class WgNrBocznyKey : Key<Maszyna> {
				internal WgNrBocznyKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((MaszynaRecord)rec).NrBoczny.TrimEnd()
				};

				public Maszyna this[string nrboczny] => (Maszyna)Find(nrboczny);
			}

			public WgNrBocznyKey WgNrBoczny => (WgNrBocznyKey)Session.Keys[keyInfoMaszynaWgNrBoczny];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="SzkolenieModule"/>
			public new SzkolenieModule Module => (SzkolenieModule)base.Module;

			public System.Linq.IQueryable<Maszyna> AsQuery() => AsQuery<Maszyna>();

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Maszyna"/>
			public new Maszyna this[int id] => (Maszyna)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Maszyna"/>
			public new Maszyna[] this[int[] ids] => (Maszyna[])base[ids];

			public new Maszyna this[Guid guid] => (Maszyna)base[guid];

			protected override Row CreateRow(RowCreator creator) => new Maszyna();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("NrBoczny");
				names.Append(divider); names.Append("Producent");
				names.Append(divider); names.Append("Model");
				names.Append(divider); names.Append("DataProd");
				names.Append(divider); names.Append("Uwagi");
			}

		}

		public abstract partial class MaszynaRow : GuidedRow {

			private MaszynaRecord record;

			protected override void AssignRecord(Record rec) {
				record = (MaszynaRecord)rec;
			}

			protected MaszynaRow() : base(true) {
			}

			protected override Row PrimaryRow => null;

			[MaxLength(6)]
			[Required]
			public string NrBoczny {
				get {
					if (record==null) GetRecord();
					return record.NrBoczny;
				}
				set {
					MaszynaSchema.NrBocznyBeforeEdit?.Invoke((Maszyna)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "NrBoczny");
					if (value.Length>NrBocznyLength) throw new ValueToLongException(this, "NrBoczny", NrBocznyLength);
					GetEdit(record==null, false);
					record.NrBoczny = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoMaszynaWgNrBoczny);
						Session.Verifiers.Add(new Maszyna.NrBocznyPoprawny((Maszyna)this));
					}
					MaszynaSchema.NrBocznyAfterEdit?.Invoke((Maszyna)this);
				}
			}

			public const int NrBocznyLength = 6;

			[MaxLength(20)]
			public string Producent {
				get {
					if (record==null) GetRecord();
					return record.Producent;
				}
				set {
					MaszynaSchema.ProducentBeforeEdit?.Invoke((Maszyna)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>ProducentLength) throw new ValueToLongException(this, "Producent", ProducentLength);
					GetEdit(record==null, false);
					record.Producent = value;
					MaszynaSchema.ProducentAfterEdit?.Invoke((Maszyna)this);
				}
			}

			public const int ProducentLength = 20;

			[MaxLength(20)]
			[Required]
			public string Model {
				get {
					if (record==null) GetRecord();
					return record.Model;
				}
				set {
					MaszynaSchema.ModelBeforeEdit?.Invoke((Maszyna)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "Model");
					if (value.Length>ModelLength) throw new ValueToLongException(this, "Model", ModelLength);
					GetEdit(record==null, false);
					record.Model = value;
					MaszynaSchema.ModelAfterEdit?.Invoke((Maszyna)this);
				}
			}

			public const int ModelLength = 20;

			[Required]
			public Date DataProd {
				get {
					if (record==null) GetRecord();
					return record.DataProd;
				}
				set {
					MaszynaSchema.DataProdBeforeEdit?.Invoke((Maszyna)this, ref value);
					if (value==Date.MinValue) throw new RequiredException(this, "DataProd");
					GetEdit(record==null, false);
					record.DataProd = value;
					MaszynaSchema.DataProdAfterEdit?.Invoke((Maszyna)this);
				}
			}

			[MaxLength(200)]
			public string Uwagi {
				get {
					if (record==null) GetRecord();
					return record.Uwagi;
				}
				set {
					MaszynaSchema.UwagiBeforeEdit?.Invoke((Maszyna)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>UwagiLength) throw new ValueToLongException(this, "Uwagi", UwagiLength);
					GetEdit(record==null, false);
					record.Uwagi = value;
					MaszynaSchema.UwagiAfterEdit?.Invoke((Maszyna)this);
				}
			}

			public const int UwagiLength = 200;

			[ChildTable("Rezerwacja", "Soneta.Szkolenie.Rezerwacja", "Maszyna")]
			public SubTable<Rezerwacja> Fields => (SubTable<Rezerwacja>)Table.Module.Rezerwacje.WgMaszyna.CreateSubTable(this);

			[Browsable(false)]
			public new Maszyny Table => (Maszyny)base.Table;

			[Browsable(false)]
			public SzkolenieModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => MaszynyTableInfo;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				MaszynaSchema.OnCalcObjectRight?.Invoke((Maszyna)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				MaszynaSchema.OnCalcParentsObjectRight?.Invoke((Maszyna)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				MaszynaSchema.OnCalcReadOnly?.Invoke((Maszyna)this, ref result);
				return result;
			}

			class NrBocznyRequiredVerifier : RequiredVerifier {
				internal NrBocznyRequiredVerifier(IRow row) : base(row, "NrBoczny") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((MaszynaRow)Row).NrBoczny));
			}

			class ModelRequiredVerifier : RequiredVerifier {
				internal ModelRequiredVerifier(IRow row) : base(row, "Model") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((MaszynaRow)Row).Model));
			}

			class DataProdRequiredVerifier : RequiredVerifier {
				internal DataProdRequiredVerifier(IRow row) : base(row, "DataProd") {
				}
				protected override bool IsValid() => !(((MaszynaRow)Row).DataProd==Date.MinValue);
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new NrBocznyRequiredVerifier(this));
				Session.Verifiers.Add(new ModelRequiredVerifier(this));
				Session.Verifiers.Add(new DataProdRequiredVerifier(this));
				MaszynaSchema.OnAdded?.Invoke((Maszyna)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				MaszynaSchema.OnLoaded?.Invoke((Maszyna)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				MaszynaSchema.OnEditing?.Invoke((Maszyna)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				MaszynaSchema.OnDeleting?.Invoke((Maszyna)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				MaszynaSchema.OnDeleted?.Invoke((Maszyna)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				MaszynaSchema.OnRepacked?.Invoke((Maszyna)this);
			}

		}

		public sealed class MaszynaRecord : GuidedRecord {
			[Required]
			[MaxLength(6)]
			public string NrBoczny = "";
			[MaxLength(20)]
			public string Producent = "";
			[Required]
			[MaxLength(20)]
			public string Model = "";
			[Required]
			public Date DataProd;
			[MaxLength(200)]
			public string Uwagi = "";

			public override Record Clone() {
				MaszynaRecord rec = (MaszynaRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				NrBoczny = creator.Read_string();
				Producent = creator.Read_string();
				Model = creator.Read_string();
				DataProd = creator.Read_date();
				Uwagi = creator.Read_string();
			}
		}

		public static class MaszynaSchema {

			internal static RowDelegate<MaszynaRow, string> NrBocznyBeforeEdit;
			public static void AddNrBocznyBeforeEdit(RowDelegate<MaszynaRow, string> value)
				=> NrBocznyBeforeEdit = (RowDelegate<MaszynaRow, string>)Delegate.Combine(NrBocznyBeforeEdit, value);

			internal static RowDelegate<MaszynaRow> NrBocznyAfterEdit;
			public static void AddNrBocznyAfterEdit(RowDelegate<MaszynaRow> value)
				=> NrBocznyAfterEdit = (RowDelegate<MaszynaRow>)Delegate.Combine(NrBocznyAfterEdit, value);

			internal static RowDelegate<MaszynaRow, string> ProducentBeforeEdit;
			public static void AddProducentBeforeEdit(RowDelegate<MaszynaRow, string> value)
				=> ProducentBeforeEdit = (RowDelegate<MaszynaRow, string>)Delegate.Combine(ProducentBeforeEdit, value);

			internal static RowDelegate<MaszynaRow> ProducentAfterEdit;
			public static void AddProducentAfterEdit(RowDelegate<MaszynaRow> value)
				=> ProducentAfterEdit = (RowDelegate<MaszynaRow>)Delegate.Combine(ProducentAfterEdit, value);

			internal static RowDelegate<MaszynaRow, string> ModelBeforeEdit;
			public static void AddModelBeforeEdit(RowDelegate<MaszynaRow, string> value)
				=> ModelBeforeEdit = (RowDelegate<MaszynaRow, string>)Delegate.Combine(ModelBeforeEdit, value);

			internal static RowDelegate<MaszynaRow> ModelAfterEdit;
			public static void AddModelAfterEdit(RowDelegate<MaszynaRow> value)
				=> ModelAfterEdit = (RowDelegate<MaszynaRow>)Delegate.Combine(ModelAfterEdit, value);

			internal static RowDelegate<MaszynaRow, Date> DataProdBeforeEdit;
			public static void AddDataProdBeforeEdit(RowDelegate<MaszynaRow, Date> value)
				=> DataProdBeforeEdit = (RowDelegate<MaszynaRow, Date>)Delegate.Combine(DataProdBeforeEdit, value);

			internal static RowDelegate<MaszynaRow> DataProdAfterEdit;
			public static void AddDataProdAfterEdit(RowDelegate<MaszynaRow> value)
				=> DataProdAfterEdit = (RowDelegate<MaszynaRow>)Delegate.Combine(DataProdAfterEdit, value);

			internal static RowDelegate<MaszynaRow, string> UwagiBeforeEdit;
			public static void AddUwagiBeforeEdit(RowDelegate<MaszynaRow, string> value)
				=> UwagiBeforeEdit = (RowDelegate<MaszynaRow, string>)Delegate.Combine(UwagiBeforeEdit, value);

			internal static RowDelegate<MaszynaRow> UwagiAfterEdit;
			public static void AddUwagiAfterEdit(RowDelegate<MaszynaRow> value)
				=> UwagiAfterEdit = (RowDelegate<MaszynaRow>)Delegate.Combine(UwagiAfterEdit, value);

			internal static RowDelegate<MaszynaRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<MaszynaRow> value)
				=> OnLoaded = (RowDelegate<MaszynaRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<MaszynaRow> OnAdded;
			public static void AddOnAdded(RowDelegate<MaszynaRow> value)
				=> OnAdded = (RowDelegate<MaszynaRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<MaszynaRow> OnEditing;
			public static void AddOnEditing(RowDelegate<MaszynaRow> value)
				=> OnEditing = (RowDelegate<MaszynaRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<MaszynaRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<MaszynaRow> value)
				=> OnDeleting = (RowDelegate<MaszynaRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<MaszynaRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<MaszynaRow> value)
				=> OnDeleted = (RowDelegate<MaszynaRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<MaszynaRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<MaszynaRow> value)
				=> OnRepacked = (RowDelegate<MaszynaRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<MaszynaRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<MaszynaRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<MaszynaRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<MaszynaRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<MaszynaRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<MaszynaRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<MaszynaRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<MaszynaRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<MaszynaRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

		public static readonly Soneta.Business.App.TableInfo RezerwacjeTableInfo = new Soneta.Business.App.TableInfo.Create<Rezerwacje, Rezerwacja, RezerwacjaRecord>("Rezerwac") {
		};

		public Rezerwacje Rezerwacje => (Rezerwacje)Session.Tables[RezerwacjeTableInfo];

		private static Soneta.Business.App.KeyInfo keyInfoRezerwacjaLot = new Soneta.Business.App.KeyInfo(RezerwacjeTableInfo, table => new RezerwacjaTable.LotRelation(table)) {
			Name = "Rezerwacja_Lot",
			RelationTo = "Lot",
			DeleteCascade = true,
			CollectionName = "Fields",
			SubTableCreator = (st, row) => new SubTable<Rezerwacja>(st, row),
			KeyFields = new[] {"Lot", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoRezerwacjaMaszyna = new Soneta.Business.App.KeyInfo(RezerwacjeTableInfo, table => new RezerwacjaTable.MaszynaRelation(table)) {
			Name = "Rezerwacja_Maszyna",
			RelationTo = "Maszyna",
			DeleteCascade = true,
			CollectionName = "Fields",
			SubTableCreator = (st, row) => new SubTable<Rezerwacja>(st, row),
			KeyFields = new[] {"Maszyna", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoRezerwacjaKlient = new Soneta.Business.App.KeyInfo(RezerwacjeTableInfo, table => new RezerwacjaTable.KlientRelation(table)) {
			Name = "Rezerwacja_Klient",
			RelationTo = "Kontrahent",
			DeleteCascade = true,
			CollectionName = "Fields",
			SubTableCreator = (st, row) => new SubTable<Rezerwacja>(st, row),
			KeyFields = new[] {"Klient", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoRezerwacjaWgNrRezerwacji = new Soneta.Business.App.KeyInfo(RezerwacjeTableInfo, table => new RezerwacjaTable.WgNrRezerwacjiKey(table)) {
			Name = "WgNrRezerwacji",
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"NrRezerwacji"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoRezerwacjaWgDaty = new Soneta.Business.App.KeyInfo(RezerwacjeTableInfo, table => new RezerwacjaTable.WgDatyKey(table)) {
			Name = "WgDaty",
			KeyFields = new[] {"Data", "ID"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów Rezerwacja.
		/// Dziedzicząca klasa <see cref="Rezerwacje"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="Rezerwacje"/>
		/// <seealso cref="RezerwacjaRow"/>
		/// <seealso cref="Rezerwacja"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Tabela rezerwacji lotów dla klientów")]
		public abstract partial class RezerwacjaTable : GuidedTable {

			protected RezerwacjaTable() {}

			public class LotRelation : Key<Rezerwacja> {
				internal LotRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((RezerwacjaRecord)rec).Lot,
					row.ID
				};

				public SubTable<Rezerwacja> this[Lot lot] => new SubTable<Rezerwacja>(this, lot);
			}

			public LotRelation WgLot => (LotRelation)Session.Keys[keyInfoRezerwacjaLot];

			public class MaszynaRelation : Key<Rezerwacja> {
				internal MaszynaRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((RezerwacjaRecord)rec).Maszyna,
					row.ID
				};

				public SubTable<Rezerwacja> this[Maszyna maszyna] => new SubTable<Rezerwacja>(this, maszyna);
			}

			public MaszynaRelation WgMaszyna => (MaszynaRelation)Session.Keys[keyInfoRezerwacjaMaszyna];

			public class KlientRelation : Key<Rezerwacja> {
				internal KlientRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((RezerwacjaRecord)rec).Klient,
					row.ID
				};

				public SubTable<Rezerwacja> this[Kontrahent klient] => new SubTable<Rezerwacja>(this, klient);
			}

			public KlientRelation WgKlient => (KlientRelation)Session.Keys[keyInfoRezerwacjaKlient];

			public class WgNrRezerwacjiKey : Key<Rezerwacja> {
				internal WgNrRezerwacjiKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((RezerwacjaRecord)rec).NrRezerwacji.TrimEnd()
				};

				public Rezerwacja this[string nrrezerwacji] => (Rezerwacja)Find(nrrezerwacji);
			}

			public WgNrRezerwacjiKey WgNrRezerwacji => (WgNrRezerwacjiKey)Session.Keys[keyInfoRezerwacjaWgNrRezerwacji];

			public class WgDatyKey : Key<Rezerwacja> {
				internal WgDatyKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((RezerwacjaRecord)rec).Data,
					row.ID
				};

				public SubTable<Rezerwacja> this[Date data] => new SubTable<Rezerwacja>(this, data);
			}

			public WgDatyKey WgDaty => (WgDatyKey)Session.Keys[keyInfoRezerwacjaWgDaty];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="SzkolenieModule"/>
			public new SzkolenieModule Module => (SzkolenieModule)base.Module;

			public System.Linq.IQueryable<Rezerwacja> AsQuery() => AsQuery<Rezerwacja>();

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Rezerwacja"/>
			public new Rezerwacja this[int id] => (Rezerwacja)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Rezerwacja"/>
			public new Rezerwacja[] this[int[] ids] => (Rezerwacja[])base[ids];

			public new Rezerwacja this[Guid guid] => (Rezerwacja)base[guid];

			protected override Row CreateRow(RowCreator creator) => new Rezerwacja();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("NrRezerwacji");
				names.Append(divider); names.Append("Data");
				names.Append(divider); names.Append("Lot");
				names.Append(divider); names.Append("Maszyna");
				names.Append(divider); names.Append("Klient");
				names.Append(divider); names.Append("CenaLotuValue");
				names.Append(divider); names.Append("CenaLotuSymbol");
				names.Append(divider); names.Append("CzyOplacona");
			}

		}

		public abstract partial class RezerwacjaRow : GuidedRow {

			private RezerwacjaRecord record;

			protected override void AssignRecord(Record rec) {
				record = (RezerwacjaRecord)rec;
			}

			protected RezerwacjaRow() : base(true) {
			}

			protected override Row PrimaryRow => null;

			[MaxLength(6)]
			[Required]
			public string NrRezerwacji {
				get {
					if (record==null) GetRecord();
					return record.NrRezerwacji;
				}
				set {
					RezerwacjaSchema.NrRezerwacjiBeforeEdit?.Invoke((Rezerwacja)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "NrRezerwacji");
					if (value.Length>NrRezerwacjiLength) throw new ValueToLongException(this, "NrRezerwacji", NrRezerwacjiLength);
					GetEdit(record==null, false);
					record.NrRezerwacji = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoRezerwacjaWgNrRezerwacji);
					}
					RezerwacjaSchema.NrRezerwacjiAfterEdit?.Invoke((Rezerwacja)this);
				}
			}

			public const int NrRezerwacjiLength = 6;

			[Required]
			public Date Data {
				get {
					if (record==null) GetRecord();
					return record.Data;
				}
				set {
					RezerwacjaSchema.DataBeforeEdit?.Invoke((Rezerwacja)this, ref value);
					if (value==Date.MinValue) throw new RequiredException(this, "Data");
					GetEdit(record==null, false);
					record.Data = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoRezerwacjaWgDaty);
					}
					RezerwacjaSchema.DataAfterEdit?.Invoke((Rezerwacja)this);
				}
			}

			[Caption("Lot widokowy")]
			[Required]
			public Lot Lot {
				get {
					if (record==null) GetRecord();
					return (Lot)GetRowReference(ref record.Lot);
				}
				set {
					RezerwacjaSchema.LotBeforeEdit?.Invoke((Rezerwacja)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					if (value==null) throw new RequiredException(this, "Lot");
					record.Lot = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoRezerwacjaLot);
					}
					RezerwacjaSchema.LotAfterEdit?.Invoke((Rezerwacja)this);
				}
			}

			[Caption("Maszyna")]
			[Required]
			public Maszyna Maszyna {
				get {
					if (record==null) GetRecord();
					return (Maszyna)GetRowReference(ref record.Maszyna);
				}
				set {
					RezerwacjaSchema.MaszynaBeforeEdit?.Invoke((Rezerwacja)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					if (value==null) throw new RequiredException(this, "Maszyna");
					record.Maszyna = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoRezerwacjaMaszyna);
					}
					RezerwacjaSchema.MaszynaAfterEdit?.Invoke((Rezerwacja)this);
				}
			}

			[Caption("Klient")]
			[Required]
			public Kontrahent Klient {
				get {
					if (record==null) GetRecord();
					return (Kontrahent)GetRowReference(ref record.Klient);
				}
				set {
					RezerwacjaSchema.KlientBeforeEdit?.Invoke((Rezerwacja)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					if (value==null) throw new RequiredException(this, "Klient");
					record.Klient = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoRezerwacjaKlient);
					}
					RezerwacjaSchema.KlientAfterEdit?.Invoke((Rezerwacja)this);
				}
			}

			[Description("Cena za lot dla klienta")]
			[Required]
			public Currency CenaLotu {
				get {
					if (record==null) GetRecord();
					return record.CenaLotu;
				}
				set {
					RezerwacjaSchema.CenaLotuBeforeEdit?.Invoke((Rezerwacja)this, ref value);
					if (value==Currency.Zero) throw new RequiredException(this, "CenaLotu");
					GetEdit(record==null, false);
					record.CenaLotu = value;
					RezerwacjaSchema.CenaLotuAfterEdit?.Invoke((Rezerwacja)this);
				}
			}

			public CzyOplacone CzyOplacona {
				get {
					if (record==null) GetRecord();
					return record.CzyOplacona;
				}
				set {
					RezerwacjaSchema.CzyOplaconaBeforeEdit?.Invoke((Rezerwacja)this, ref value);
					GetEdit(record==null, false);
					record.CzyOplacona = value;
					RezerwacjaSchema.CzyOplaconaAfterEdit?.Invoke((Rezerwacja)this);
				}
			}

			[Browsable(false)]
			public new Rezerwacje Table => (Rezerwacje)base.Table;

			[Browsable(false)]
			public SzkolenieModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => RezerwacjeTableInfo;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				RezerwacjaSchema.OnCalcObjectRight?.Invoke((Rezerwacja)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				RezerwacjaSchema.OnCalcParentsObjectRight?.Invoke((Rezerwacja)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				RezerwacjaSchema.OnCalcReadOnly?.Invoke((Rezerwacja)this, ref result);
				return result;
			}

			class NrRezerwacjiRequiredVerifier : RequiredVerifier {
				internal NrRezerwacjiRequiredVerifier(IRow row) : base(row, "NrRezerwacji") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((RezerwacjaRow)Row).NrRezerwacji));
			}

			class DataRequiredVerifier : RequiredVerifier {
				internal DataRequiredVerifier(IRow row) : base(row, "Data") {
				}
				protected override bool IsValid() => !(((RezerwacjaRow)Row).Data==Date.MinValue);
			}

			class LotRequiredVerifier : RequiredVerifier {
				internal LotRequiredVerifier(IRow row) : base(row, "Lot") {
				}
				protected override bool IsValid() => ((RezerwacjaRow)Row).Lot!=null;
			}

			class MaszynaRequiredVerifier : RequiredVerifier {
				internal MaszynaRequiredVerifier(IRow row) : base(row, "Maszyna") {
				}
				protected override bool IsValid() => ((RezerwacjaRow)Row).Maszyna!=null;
			}

			class KlientRequiredVerifier : RequiredVerifier {
				internal KlientRequiredVerifier(IRow row) : base(row, "Klient") {
				}
				protected override bool IsValid() => ((RezerwacjaRow)Row).Klient!=null;
			}

			class CenaLotuRequiredVerifier : RequiredVerifier {
				internal CenaLotuRequiredVerifier(IRow row) : base(row, "CenaLotu") {
				}
				protected override bool IsValid() => !(((RezerwacjaRow)Row).CenaLotu==Currency.Zero);
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new NrRezerwacjiRequiredVerifier(this));
				Session.Verifiers.Add(new DataRequiredVerifier(this));
				Session.Verifiers.Add(new LotRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Lot==null || record.Lot.State==RowState.Detached || Session==record.Lot.Session);
				Session.Verifiers.Add(new MaszynaRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Maszyna==null || record.Maszyna.State==RowState.Detached || Session==record.Maszyna.Session);
				Session.Verifiers.Add(new KlientRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Klient==null || record.Klient.State==RowState.Detached || Session==record.Klient.Session);
				Session.Verifiers.Add(new CenaLotuRequiredVerifier(this));
				RezerwacjaSchema.OnAdded?.Invoke((Rezerwacja)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				RezerwacjaSchema.OnLoaded?.Invoke((Rezerwacja)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				RezerwacjaSchema.OnEditing?.Invoke((Rezerwacja)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				RezerwacjaSchema.OnDeleting?.Invoke((Rezerwacja)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				RezerwacjaSchema.OnDeleted?.Invoke((Rezerwacja)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				RezerwacjaSchema.OnRepacked?.Invoke((Rezerwacja)this);
			}

		}

		public sealed class RezerwacjaRecord : GuidedRecord {
			[Required]
			[MaxLength(6)]
			public string NrRezerwacji = "";
			[Required]
			public Date Data;
			[Required]
			[ParentTable("Lot")]
			public IRow Lot;
			[Required]
			[ParentTable("Maszyna")]
			public IRow Maszyna;
			[Required]
			[ParentTable("Kontrahent")]
			public IRow Klient;
			[Required]
			public Currency CenaLotu;
			public CzyOplacone CzyOplacona;

			public override Record Clone() {
				RezerwacjaRecord rec = (RezerwacjaRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				NrRezerwacji = creator.Read_string();
				Data = creator.Read_date();
				Lot = creator.Read_Row(LotyTableInfo);
				Maszyna = creator.Read_Row(MaszynyTableInfo);
				Klient = creator.Read_Row("Kontrahenci");
				CenaLotu = creator.Read_currency();
				CzyOplacona = (CzyOplacone)creator.Read_int();
			}
		}

		public static class RezerwacjaSchema {

			internal static RowDelegate<RezerwacjaRow, string> NrRezerwacjiBeforeEdit;
			public static void AddNrRezerwacjiBeforeEdit(RowDelegate<RezerwacjaRow, string> value)
				=> NrRezerwacjiBeforeEdit = (RowDelegate<RezerwacjaRow, string>)Delegate.Combine(NrRezerwacjiBeforeEdit, value);

			internal static RowDelegate<RezerwacjaRow> NrRezerwacjiAfterEdit;
			public static void AddNrRezerwacjiAfterEdit(RowDelegate<RezerwacjaRow> value)
				=> NrRezerwacjiAfterEdit = (RowDelegate<RezerwacjaRow>)Delegate.Combine(NrRezerwacjiAfterEdit, value);

			internal static RowDelegate<RezerwacjaRow, Date> DataBeforeEdit;
			public static void AddDataBeforeEdit(RowDelegate<RezerwacjaRow, Date> value)
				=> DataBeforeEdit = (RowDelegate<RezerwacjaRow, Date>)Delegate.Combine(DataBeforeEdit, value);

			internal static RowDelegate<RezerwacjaRow> DataAfterEdit;
			public static void AddDataAfterEdit(RowDelegate<RezerwacjaRow> value)
				=> DataAfterEdit = (RowDelegate<RezerwacjaRow>)Delegate.Combine(DataAfterEdit, value);

			internal static RowDelegate<RezerwacjaRow, Lot> LotBeforeEdit;
			public static void AddLotBeforeEdit(RowDelegate<RezerwacjaRow, Lot> value)
				=> LotBeforeEdit = (RowDelegate<RezerwacjaRow, Lot>)Delegate.Combine(LotBeforeEdit, value);

			internal static RowDelegate<RezerwacjaRow> LotAfterEdit;
			public static void AddLotAfterEdit(RowDelegate<RezerwacjaRow> value)
				=> LotAfterEdit = (RowDelegate<RezerwacjaRow>)Delegate.Combine(LotAfterEdit, value);

			internal static RowDelegate<RezerwacjaRow, Maszyna> MaszynaBeforeEdit;
			public static void AddMaszynaBeforeEdit(RowDelegate<RezerwacjaRow, Maszyna> value)
				=> MaszynaBeforeEdit = (RowDelegate<RezerwacjaRow, Maszyna>)Delegate.Combine(MaszynaBeforeEdit, value);

			internal static RowDelegate<RezerwacjaRow> MaszynaAfterEdit;
			public static void AddMaszynaAfterEdit(RowDelegate<RezerwacjaRow> value)
				=> MaszynaAfterEdit = (RowDelegate<RezerwacjaRow>)Delegate.Combine(MaszynaAfterEdit, value);

			internal static RowDelegate<RezerwacjaRow, Kontrahent> KlientBeforeEdit;
			public static void AddKlientBeforeEdit(RowDelegate<RezerwacjaRow, Kontrahent> value)
				=> KlientBeforeEdit = (RowDelegate<RezerwacjaRow, Kontrahent>)Delegate.Combine(KlientBeforeEdit, value);

			internal static RowDelegate<RezerwacjaRow> KlientAfterEdit;
			public static void AddKlientAfterEdit(RowDelegate<RezerwacjaRow> value)
				=> KlientAfterEdit = (RowDelegate<RezerwacjaRow>)Delegate.Combine(KlientAfterEdit, value);

			internal static RowDelegate<RezerwacjaRow, Currency> CenaLotuBeforeEdit;
			public static void AddCenaLotuBeforeEdit(RowDelegate<RezerwacjaRow, Currency> value)
				=> CenaLotuBeforeEdit = (RowDelegate<RezerwacjaRow, Currency>)Delegate.Combine(CenaLotuBeforeEdit, value);

			internal static RowDelegate<RezerwacjaRow> CenaLotuAfterEdit;
			public static void AddCenaLotuAfterEdit(RowDelegate<RezerwacjaRow> value)
				=> CenaLotuAfterEdit = (RowDelegate<RezerwacjaRow>)Delegate.Combine(CenaLotuAfterEdit, value);

			internal static RowDelegate<RezerwacjaRow, CzyOplacone> CzyOplaconaBeforeEdit;
			public static void AddCzyOplaconaBeforeEdit(RowDelegate<RezerwacjaRow, CzyOplacone> value)
				=> CzyOplaconaBeforeEdit = (RowDelegate<RezerwacjaRow, CzyOplacone>)Delegate.Combine(CzyOplaconaBeforeEdit, value);

			internal static RowDelegate<RezerwacjaRow> CzyOplaconaAfterEdit;
			public static void AddCzyOplaconaAfterEdit(RowDelegate<RezerwacjaRow> value)
				=> CzyOplaconaAfterEdit = (RowDelegate<RezerwacjaRow>)Delegate.Combine(CzyOplaconaAfterEdit, value);

			internal static RowDelegate<RezerwacjaRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<RezerwacjaRow> value)
				=> OnLoaded = (RowDelegate<RezerwacjaRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<RezerwacjaRow> OnAdded;
			public static void AddOnAdded(RowDelegate<RezerwacjaRow> value)
				=> OnAdded = (RowDelegate<RezerwacjaRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<RezerwacjaRow> OnEditing;
			public static void AddOnEditing(RowDelegate<RezerwacjaRow> value)
				=> OnEditing = (RowDelegate<RezerwacjaRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<RezerwacjaRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<RezerwacjaRow> value)
				=> OnDeleting = (RowDelegate<RezerwacjaRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<RezerwacjaRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<RezerwacjaRow> value)
				=> OnDeleted = (RowDelegate<RezerwacjaRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<RezerwacjaRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<RezerwacjaRow> value)
				=> OnRepacked = (RowDelegate<RezerwacjaRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<RezerwacjaRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<RezerwacjaRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<RezerwacjaRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<RezerwacjaRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<RezerwacjaRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<RezerwacjaRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<RezerwacjaRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<RezerwacjaRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<RezerwacjaRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

	}

	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public static class StaticsSzkolenieModule {
		public static SzkolenieModule GetSzkolenie(this Session session) => SzkolenieModule.GetInstance(session);
	}

}

